generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Space {
    id                  String              @id @default(cuid())
    userId              String
    address             String?
    landmark            String?
    city                String?
    state               String?             @db.VarChar(18)
    pincode             Int?
    typeOfSpace         String?
    overNightStays      Boolean?
    hasParking          Boolean?            @default(false)
    parkingOptions      ParkingOptions[]
    parkingDescription  String?
    securityCameras     Boolean?
    name                String?
    description         String?
    age                 String?
    size                Int?
    rules               String?
    wifiName            String?
    wifiPassword        String?
    arrivalInstructions String?
    agreesToPolicies    Boolean?
    cancellationPolicy  CancellationPolicy?
    cleaningMeasures    CleaningMeasure[]
    protectiveGear      ProtectiveGear[]
    distanceMeasures    DistanceMeasure[]
    covidSignage        CovidSignage[]
    photos              String[]
    operatingHours      OperatingHours[]
    user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    progress            SpaceProgress?
    listings            Listing[]
}

model Listing {
    id              String         @id @default(cuid())
    spaceId         String
    type            ListingType
    hourlyRate      Int
    minimumHours    Int
    discount        Int
    cleaningRate    CleaningRate
    additionalFee   Int
    instantBooking  InstantBooking
    amenities       Amenities[]
    capacity        Int
    customAmenities String[]
    space           Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    bookings        Booking[]

    @@unique([spaceId, type], name: "spaceId_type")
}

model Booking {
    id                 String        @id @default(cuid())
    listingId          String
    userId             String
    date               DateTime
    startTime          Int
    endTime            Int
    attendees          Int
    totalPrice         Int
    subtotal           Int
    processingFee      Int
    discountAmount     Int
    hours              Int
    status             BookingStatus @default(PENDING)
    paymentStatus      PaymentStatus @default(UNPAID)
    cancellationReason String?
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
    user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing            Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
    PENDING
    CONFIRMED
    COMPLETED
    CANCELLED
    REJECTED
}

enum PaymentStatus {
    UNPAID
    PAID
    REFUNDED
    PARTIAL_REFUND
}

model SpaceProgress {
    id                          String   @id @default(cuid())
    spaceId                     String   @unique
    addressCompleted            Boolean? @default(false)
    spaceDetailsCompleted       Boolean? @default(false)
    photosCompleted             Boolean? @default(false)
    policiesCompleted           Boolean? @default(false)
    healthSafetyCompleted       Boolean? @default(false)
    operatingHoursCompleted     Boolean? @default(false)
    cancellationPolicyCompleted Boolean? @default(false)
    typeOfSpaceCompleted        Boolean? @default(false)
    updatedAt                   DateTime @updatedAt
    activityCompleted           Boolean? @default(false)
    space                       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model OperatingHours {
    id        String    @id @default(cuid())
    spaceId   String
    dayOfWeek DayOfWeek
    isOpen    Boolean?  @default(true)
    openTime  String?
    closeTime String?
    space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)

    @@unique([spaceId, dayOfWeek])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    Authenticator Authenticator[]
    spaces        Space[]
    sessions      Session[]
    bookings      Booking[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

enum ParkingOptions {
    ONSITE
    STREET
    VALET
    METERED_STREET
    LOT
    PAID_ONSITE
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum CancellationPolicy {
    VERY_FLEXIBLE
    FLEXIBLE
    THIRTY_DAY
    NINETY_DAY
}

enum CleaningMeasure {
    GUIDELINES_COMPLIANCE
    HIGH_TOUCH_DISINFECTION
    POROUS_MATERIALS_CLEANED
    PROFESSIONAL_CLEANER
    SPACED_BOOKINGS
}

enum ProtectiveGear {
    DISINFECTING_WIPES
    DISPOSABLE_GLOVES
    DISPOSABLE_MASKS
    HAND_SANITIZER
}

enum DistanceMeasure {
    LIMITED_CAPACITY
    OUTDOOR_VENTILATION
    HEPA_AIR_FILTERS
    OUTDOOR_SPACE
    RECONFIGURED_SPACE
}

enum CovidSignage {
    CLEANING_CHECKLIST
    COVID_GUIDELINES
    DISTANCE_MARKERS
    DIRECTIONAL_ARROWS
}

enum CleaningRate {
    INCLUDED
    ADDITIONAL
}

enum InstantBooking {
    EVERYONE
    NONE
}

enum Amenities {
    WIFI
    TABLES
    CHAIRS
    WHITEBOARD
    CHALKBOARD
    PROJECTOR
    SCREEN
    FLIP_CHARTS
    MONITOR
    CONFERENCEPHONE
    PARKINGSPACES
    PUBLICTRANSPORTATION
    RESTROOMS
    WHEELCHAIRACCESSIBLE
    BREAKOUTSPACE
    KITCHEN
    COFFEE
    APPLETV
    PRINTER
    ROOFTOP
    OUTDOORAREA
}

enum ListingType {
    MEETING
    EVENTS
    MEDIA_PRODUCTION
}
