datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    listings      Listing[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Space {
  id         String   @id @default(cuid())
  name       String
  about      String
  price      Float
  hostname   String
  status     String
  images     String[]
  reviews    Float
  categories String[]
  amenities  String[]
  people     Int
  comments   String[]
  currency   String   @default("INR")
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  address    String
  city       String
  state      String
  country    String
  timeings   String[]
  lat        Float?   // Latitude field
  lng        Float?   // Longitude field
}

model Listing {
    id                  String              @id @default(cuid())
    userId              String
    progress            ListingProgress?
    // address
    address             String?
    landmark            String?
    city                String?
    state               String?             @db.VarChar(18)
    pincode             Int?
    // space details
    typeOfSpace         String?
    overNightStays      Boolean?
    hasParking          Boolean?            @default(false)
    parkingOptions      ParkingOptions[]
    parkingDescription  String?
    securityCameras     Boolean?
    // type of space
    name                String?
    description         String?
    age                 String?
    size                Int?
    rules               String?
    wifiName            String?
    wifiPassword        String?
    arrivalInstructions String?
    // operating hours
    operatingHours      OperatingHours[]
    // upload photos
    photos              Photo[]
    //policies
    agreesToPolicies    Boolean?
    // cancellation policy
    cancellationPolicy  CancellationPolicy?
    // health and Safety
    cleaningMeasures    CleaningMeasure[]
    protectiveGear      ProtectiveGear[]
    distanceMeasures    DistanceMeasure[]
    covidSignage        CovidSignage[]

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ListingProgress {
    id                          String   @id @default(cuid())
    listingId                   String   @unique
    listing                     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
    addressCompleted            Boolean? @default(false)
    spaceDetailsCompleted       Boolean? @default(false)
    photosCompleted             Boolean? @default(false)
    policiesCompleted           Boolean? @default(false)
    healthSafetyCompleted       Boolean? @default(false)
    operatingHoursCompleted     Boolean? @default(false)
    cancellationPolicyCompleted Boolean? @default(false)
    typeOfSpaceCompleted        Boolean? @default(false)
    updatedAt                   DateTime @updatedAt
}

model Photo {
    id         String   @id @default(cuid())
    url        String
    uploadedAt DateTime @default(now())
    listing    Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId  String
}

model OperatingHours {
    id        String    @id @default(cuid())
    listingId String
    listing   Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
    dayOfWeek DayOfWeek
    isOpen    Boolean?  @default(true)
    openTime  String?
    closeTime String?

    @@unique([listingId, dayOfWeek])
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

enum ParkingOptions {
    ONSITE
    STREET
    VALET
    METERED_STREET
    LOT
    PAID_ONSITE
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum CancellationPolicy {
    VERY_FLEXIBLE
    FLEXIBLE
    THIRTY_DAY
    NINETY_DAY
}

enum CleaningMeasure {
    GUIDELINES_COMPLIANCE
    HIGH_TOUCH_DISINFECTION
    POROUS_MATERIALS_CLEANED
    PROFESSIONAL_CLEANER
    SPACED_BOOKINGS
}

enum ProtectiveGear {
    DISINFECTING_WIPES
    DISPOSABLE_GLOVES
    DISPOSABLE_MASKS
    HAND_SANITIZER
}

enum DistanceMeasure {
    LIMITED_CAPACITY
    OUTDOOR_VENTILATION
    HEPA_AIR_FILTERS
    OUTDOOR_SPACE
    RECONFIGURED_SPACE
}

enum CovidSignage {
    CLEANING_CHECKLIST
    COVID_GUIDELINES
    DISTANCE_MARKERS
    DIRECTIONAL_ARROWS
}
